import printf, strcmp;

struct Foo
{
	//struct can have field-,
	value = 42;
	//array-
	myByteArray{128};
	//var-array-
	myValues[42];
	//and function-members
	dump()
	{
		printf("%-20p%-20ld%-20ld\n", this, this.bar, this.tar);
	}

	//there is also a 'constructor' and 'destructor'
	constructor(a, b = 0)
	{
		if(a)
			this.value = a + b;
	}

	//you can overload all binary operators
	operator this / val
	{
		return this.value / val;
	}
	operator val / this
	{
		return val / this.value;
	}

	//and unary operators
	operator ++this
	{
		return ++this.value;
	}
	operator this++
	{
		return this.value++;
	}

	//there are also a few special operators you can overload
	operator this.name
	{
		return name;
	}
	operator this[key]
	{
		return "getting property %s" % key;
	}

	operator this(a, b, c = 3)
	{
		return a + b + c;
	}
};

var val = new Foo();
val.dump();

printf("val / 10f = %g\n", val / 10f);
printf("100f / val = %g\n", 100f / val);
printf("val++ = %d\n", val++);
printf("++val = %d\n", ++val);
printf("val.foo = %s\n", val.foo);
printf("val[\"foo\"] = %s\n", val["foo"]);
printf("val(1337, 10) = %d\n", val(1337, 10));

val.dump();
delete val;
