import assert, assertEq from "../common.ptrs";

var op = "none";
var val = 0;
struct Test
{
	constructor(a, b, c)
	{
		op = "ctor";
		val = new array[] [a, b, c];
	}

	operator cast<typ>this
	{
		op = "cast";
		val = typ;
		return 3;
	}
	operator cast<string>this
	{
		op = "tostr";
		return 4;
	}

	operator this(a, b)
	{
		op = "call";
		val = new array[] [a, b];
	}

	operator this[key]
	{
		op = ".get";
		val = key;
		return 6;
	}
	operator this[key] = rval
	{
		op = ".set";
		val = new array[] [key, rval];
		return 7;
	}
	operator this[key](a, b)
	{
		op = ".call";
		val = new array[] [key, a, b];
		return 8;
	}

	operator key in this
	{
		op = "in";
		val = key;
		return 9;
	}

	operator foreach in this
	{
		val = false;
		assertEq(false, yield 0);

		val = "hi";
		assertEq(false, yield val);

		scoped
		{
			val = 31.12;
			assertEq(false, yield val);
		}

		val = 42;
		assertEq(true, yield val);

		op = "each";
	}
};

var test = new Test(42, "kek", 3.14);
assertEq("ctor", op);
assertEq(42, val[0]);
assertEq("kek", val[1]);
assertEq(3.14, val[2]);
delete val;

assertEq(3, cast<int>test);
assertEq("cast", op);
assertEq(type<int>, val);

assertEq("4", cast<string>test);
assertEq("tostr", op);

assertEq(6, test.foo);
assertEq(".get", op);
assertEq("foo", val);

assertEq(42f, test.bar = 42f);
assertEq(".set", op);
assertEq("bar", val[0]);
assertEq(42f, val[1]);
delete val;

//TODO implement this[key]() overloads
/*assertEq(8, test.tar("devil", 666));
assertEq(".call", op);
assertEq("tar", val[0]);
assertEq("devil", val[1]);
assertEq(666, val[2]);
delete val;*/

assertEq(true, "xar" in test);
assertEq("in", op);
assertEq("xar", val);

foreach(val2 in test)
{
	assertEq(val, val2);
	if(val == 42)
		return;
}
assertEq("each", op);
